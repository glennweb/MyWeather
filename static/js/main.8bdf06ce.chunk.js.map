{"version":3,"sources":["componants/weatherTable.tsx","componants/weather.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["WeatherTable","citiesWeather","dataSource","columns","title","dataIndex","key","sorter","a","b","name","length","main","feels_like","pressure","temp","temp_max","temp_min","rowKey","record","id","pagination","pageSize","Option","Select","Content","Layout","CustomLayout","styled","Weather","useState","Array","allCities","setAllCities","cities","setCities","useLocalStorage","JSON","stringify","myCities","setMyCities","setCitiesWeather","error","setError","loading","setLoading","useEffect","_myCities","parse","fetchData","fetch","toString","response","ok","json","data","list","message","getAllCities","fetchCity","_","value","filter","x","toLocaleLowerCase","indexOf","slice","spinning","span","offset","style","paddingTop","level","paddingBottom","disabled","filterOption","mode","allowClear","tagRender","props","onClose","city","find","closable","country","width","placeholder","onChange","onSearch","map","subTitle","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8bdf06ce.chunk.js","sourcesContent":["import { Table } from \"antd\";\r\nimport React from \"react\";\r\nimport { CityWeather } from \"../interfaces/CityWeather\";\r\n\r\nexport const WeatherTable = ({\r\n  citiesWeather,\r\n}: {\r\n  citiesWeather: Array<CityWeather>;\r\n}) => {\r\n  const columns = [\r\n    {\r\n      title: \"Name\",\r\n      dataIndex: \"name\",\r\n      key: \"name\",\r\n      sorter: (a: CityWeather, b: CityWeather) => a.name.length - b.name.length,\r\n    },\r\n    {\r\n      title: \"Feels Like\",\r\n      dataIndex: [\"main\", \"feels_like\"],\r\n      key: \"feels_like\",\r\n      sorter: (a: CityWeather, b: CityWeather) =>\r\n        a.main.feels_like - b.main.feels_like,\r\n    },\r\n    {\r\n      title: \"Humidity\",\r\n      dataIndex: [\"main\", \"humidity\"],\r\n      key: \"humidity\",\r\n      sorter: (a: CityWeather, b: CityWeather) =>\r\n        a.main.feels_like - b.main.feels_like,\r\n    },\r\n    {\r\n      title: \"Pressure\",\r\n      dataIndex: [\"main\", \"pressure\"],\r\n      key: \"pressure\",\r\n      sorter: (a: CityWeather, b: CityWeather) =>\r\n        a.main.pressure - b.main.pressure,\r\n    },\r\n    {\r\n      title: \"Now\",\r\n      dataIndex: [\"main\", \"temp\"],\r\n      key: \"temp\",\r\n      sorter: (a: CityWeather, b: CityWeather) => a.main.temp - b.main.temp,\r\n    },\r\n    {\r\n      title: \"Todays High\",\r\n      dataIndex: [\"main\", \"temp_max\"],\r\n      key: \"temp_max\",\r\n      sorter: (a: CityWeather, b: CityWeather) =>\r\n        a.main.temp_max - b.main.temp_max,\r\n    },\r\n    {\r\n      title: \"Todays Min\",\r\n      dataIndex: [\"main\", \"temp_min\"],\r\n      key: \"temp_min\",\r\n      sorter: (a: CityWeather, b: CityWeather) =>\r\n        a.main.temp_min - b.main.temp_min,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Table\r\n      dataSource={citiesWeather}\r\n      columns={columns}\r\n      rowKey={(record) => record.id}\r\n      pagination={{ pageSize: 20 }}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\n//import data from \"../Repository/city.list.json\";\r\nimport { City } from \"../interfaces/City\";\r\nimport { Col, Row, Layout, Select, Tag, Result, Spin } from \"antd\";\r\nimport Title from \"antd/lib/typography/Title\";\r\nimport * as _ from \"lodash\";\r\nimport styled from \"styled-components\";\r\nimport useLocalStorage from \"react-use-localstorage\";\r\nimport { CityWeather } from \"../interfaces/CityWeather\";\r\nimport { WeatherTable } from \"./weatherTable\";\r\n\r\nconst { Option } = Select;\r\nconst { Content } = Layout;\r\n\r\nconst CustomLayout = styled(Layout)`\r\n  height: 100% !important;\r\n`;\r\n\r\nexport const Weather = () => {\r\n  const [allCities, setAllCities] = useState(new Array<City>());\r\n  const [cities, setCities] = useState(new Array<City>());\r\n  const [myCities, setMyCities] = useLocalStorage(\r\n    \"myCities\",\r\n    JSON.stringify(new Array<number>())\r\n  );\r\n  const [citiesWeather, setCitiesWeather] = useState(new Array<CityWeather>());\r\n  const [error, setError] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const ApiKey = \"219d801f59d66e8ffe10f034f3e71979\";\r\n\r\n  useEffect(() => {\r\n    const _myCities: Array<Number> = JSON.parse(myCities);\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          `https://api.openweathermap.org/data/2.5/group?id=${_myCities.toString()}&appid=${ApiKey}`\r\n        );\r\n\r\n        if (response.ok) {\r\n          var data = await response.json();\r\n          setCitiesWeather(data.list);\r\n          setError(\"\");\r\n        } else {\r\n          setError(\"Error Occured\");\r\n        }\r\n      } catch (error) {\r\n        setError(error.message);\r\n      }\r\n    };\r\n\r\n    if (_myCities.length > 0) {\r\n      fetchData();\r\n    } else {\r\n      setCitiesWeather([]);\r\n    }\r\n  }, [myCities, setCitiesWeather]);\r\n\r\n  useEffect(() => {\r\n    const getAllCities = async () => {\r\n      setLoading(true);\r\n      const response = await fetch(\"city.list.json\");\r\n      if (response.ok) {\r\n        var data = await response.json();\r\n        setAllCities(data);\r\n        setError(\"\");\r\n      } else {\r\n        setError(\"Error Occured Loading Cities List\");\r\n      }\r\n      setLoading(false);\r\n    };\r\n    getAllCities();\r\n  }, [setAllCities]);\r\n\r\n  const debouncedFetchCity = (value: string) => {\r\n    // TODO - Clean Data for Cities that have the same City and Country\r\n    setCities(\r\n      allCities\r\n        // Find where Starts with\r\n        .filter(\r\n          (x) =>\r\n            x.name.toLocaleLowerCase().indexOf(value.toLocaleLowerCase()) === 0\r\n        )\r\n        // Fetch first 10\r\n        .slice(0, 30)\r\n    );\r\n  };\r\n\r\n  const fetchCity = _.debounce(debouncedFetchCity, 200);\r\n\r\n  const handleChange = (value: Array<number>) => {\r\n    setMyCities(JSON.stringify(value));\r\n  };\r\n\r\n  return (\r\n    <Spin spinning={loading}>\r\n      <CustomLayout>\r\n        <Content>\r\n          <Row>\r\n            <Col></Col>\r\n          </Row>\r\n          <Row>\r\n            <Col span={22} offset={1} style={{ paddingTop: \"12px\" }}>\r\n              <Title level={2}>My Weather</Title>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col span={22} offset={1} style={{ paddingBottom: \"12px\" }}>\r\n              <Select\r\n                disabled={citiesWeather.length >= 20}\r\n                filterOption={false}\r\n                mode=\"multiple\"\r\n                value={JSON.parse(myCities)}\r\n                allowClear\r\n                tagRender={(props) => {\r\n                  const { value, onClose } = props;\r\n                  var city = allCities.find((x) => x.id === value);\r\n\r\n                  return (\r\n                    <Tag closable={true} onClose={onClose}>\r\n                      {city?.name} ({city?.country})\r\n                    </Tag>\r\n                  );\r\n                }}\r\n                style={{ width: \"100%\" }}\r\n                placeholder=\"Search for your City\"\r\n                onChange={handleChange}\r\n                onSearch={fetchCity}\r\n              >\r\n                {cities.map((city) => {\r\n                  return (\r\n                    <Option key={city.id} value={city.id}>\r\n                      {city.name} ({city.country})\r\n                    </Option>\r\n                  );\r\n                })}\r\n              </Select>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col span={22} offset={1} style={{ paddingBottom: \"32px\" }}>\r\n              {citiesWeather?.length > 0 && error === \"\" && (\r\n                <WeatherTable citiesWeather={citiesWeather} />\r\n              )}\r\n              {error !== \"\" && (\r\n                <Result\r\n                  title={error}\r\n                  subTitle=\"Please try again in a few minutes\"\r\n                />\r\n              )}\r\n            </Col>\r\n          </Row>\r\n        </Content>\r\n      </CustomLayout>\r\n    </Spin>\r\n  );\r\n};\r\n","import \"./App.css\";\nimport React from \"react\";\nimport { Weather } from \"./componants/weather\";\n\nfunction App() {\n  return <Weather />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}